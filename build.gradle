plugins {
    id "com.jfrog.bintray" version "1.2"
}

apply plugin: 'groovy'
apply plugin: 'signing'
apply plugin: 'maven-publish'

group = 'net.foragerr.jmeter'
archivesBaseName = 'jmeter-gradle-plugin'

//--- versioning information ---
ext.thisPluginVersion="0.1.0"
ext.jmeterVersion = "2.13"
ext.pluginVersion = "1.2.1" //jmeter-plugin version
version = "$thisPluginVersion-$jmeterVersion"

compileGroovy {
    sourceCompatibility = '1.6'
    targetCompatibility = '1.6'
}

def bootClasspathStr = "${System.env.'JAVA_HOME'}/jre/lib/rt.jar"
project.tasks.withType(AbstractCompile, { AbstractCompile ac ->
    ac.options.bootClasspath = bootClasspathStr // options is always there but not defined on AbstractCompile so going to hit it anyway
})

repositories {
    mavenCentral()
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

configurations {
	//workaround for jmeter defect 57555 (https://bz.apache.org/bugzilla/show_bug.cgi?id=57555)
	if (jmeterVersion == '2.12'){
		compile.exclude group: 'excalibur-fortress', module: 'excalibur-fortress-container-api'
		compile.exclude group: 'excalibur-fortress', module: 'excalibur-fortress-meta'
 	
	}
	//workaround for jmeter defect 57748 (https://bz.apache.org/bugzilla/show_bug.cgi?id=57748)
	if (jmeterVersion == '2.13'){
		compile.exclude group: 'commons-math3', module: 'commons-math3'
		compile.exclude group: 'commons-pool2', module: 'commons-pool2'
	}
}

dependencies {
	
	//common to all supported versions
	compile gradleApi(),
		localGroovy(),
        "kg.apc:jmeter-plugins:${pluginVersion}",
        "kg.apc:jmeter-plugins-standard:${pluginVersion}",
        "kg.apc:jmeter-plugins-extras:${pluginVersion}",
        "kg.apc:jmeter-plugins-common:${pluginVersion}",
		"org.apache.ant:ant:1.8.4",
		"org.beanshell:bsh-core:2.0b4",
		"org.apache.jmeter:ApacheJMeter_http:${jmeterVersion}",
		"org.apache.jmeter:ApacheJMeter_junit:${jmeterVersion}",
		"org.apache.jmeter:ApacheJMeter_java:${jmeterVersion}",
		"org.apache.jmeter:ApacheJMeter_jdbc:${jmeterVersion}",
		"org.apache.jmeter:ApacheJMeter_tcp:${jmeterVersion}",
		"org.apache.jmeter:ApacheJMeter_mail:${jmeterVersion}",
		"org.apache.jmeter:ApacheJMeter_ldap:${jmeterVersion}",
		"org.apache.jmeter:ApacheJMeter_ftp:${jmeterVersion}",
		"org.apache.jmeter:ApacheJMeter_functions:${jmeterVersion}",
		"org.apache.jmeter:ApacheJMeter_monitors:${jmeterVersion}",
		"org.apache.jmeter:ApacheJMeter_jms:${jmeterVersion}",
		"org.apache.jmeter:ApacheJMeter:${jmeterVersion}",
		"org.apache.jmeter:ApacheJMeter_components:${jmeterVersion}",
		"org.apache.jmeter:ApacheJMeter_config:${jmeterVersion}",
		"org.apache.jmeter:ApacheJMeter_core:${jmeterVersion}",
		"org.apache.jmeter:ApacheJMeter_junit:${jmeterVersion}"
		

	//version specific dependencies
    if (jmeterVersion > '2.7') {
        compile "org.apache.jmeter:ApacheJMeter_native:${jmeterVersion}"
    }
	if (jmeterVersion > '2.9'){
		compile "org.apache.jmeter:ApacheJMeter_mongodb:${jmeterVersion}"
	}
	if (jmeterVersion < '2.13'){
		compile	"org.apache.jmeter:ApacheJMeter_report:${jmeterVersion}"
	}
	if (jmeterVersion > '2.9'){
		compile	"org.apache.jmeter:ApacheJMeter_components:${jmeterVersion}",
		"org.apache.jmeter:ApacheJMeter_config:${jmeterVersion}",
		"org.apache.jmeter:ApacheJMeter_junit-test:${jmeterVersion}",
		"org.apache.jmeter:ApacheJMeter_mongodb:${jmeterVersion}"
	}
	if (jmeterVersion == '2.13'){
		compile "org.apache.commons:commons-math3:3.4.1",
			"org.apache.commons:commons-pool2:2.3"
	} 
	testCompile "junit:junit:4.11"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

processResources.doLast {
    ant.replace(
            file: "${project.buildDir}/resources/main/jmeter-plugin.properties",
            token: "@jmeter.version@",
            value: "$jmeterVersion"
    )
    ant.replace(
            file: "${project.buildDir}/resources/main/jmeter-plugin.properties",
            token: "@plugin.version@",
            value: "$pluginVersion"
    )
}

//--- mvn-publish ---
def pomConfig = {
	scm {
		url 'scm:git@github.com:jmeter-gradle-plugin/jmeter-gradle-plugin.git'
		connection 'scm:git@github.com:jmeter-gradle-plugin/jmeter-gradle-plugin.git'
		developerConnection 'scm:git@github.com:jmeter-gradle-plugin/jmeter-gradle-plugin.git'
	}
	licenses {
		license {
			name 'The Apache Software License, Version 2.0'
			url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
			distribution 'repo'
		}
	}
	developers {
		developer {
			id 'foragerr'
			name 'Ra Ge'
			url 'https://github.com/jmeter-gradle-plugin/jmeter-gradle-plugin'
			email 'foragerr@gmail.com'
			roles { role 'Developer' }
		}
	}
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'A gradle plugin for publishing to Bintray')
                root.children().last() + pomConfig
            }
        }
    }
}

//--- bintray publishing ---
bintray {
	user=System.getenv('bintray_user')
	key=System.getenv('bintray_api_key')
	
    publications = ['mavenJava'] //When uploading Maven-based publication files
    publish = true //If version should be auto published after an upload
    pkg {
        repo = "jmeter"
        name = "$archivesBaseName"
        userOrg = "$archivesBaseName" 
        licenses = ['Apache-2.0']
        publicDownloadNumbers = true
        websiteUrl = 'http://foragerr.net/jmeter'
        issueTrackerUrl = 'https://github.com/jmeter-gradle-plugin/jmeter-gradle-plugin/issues'
        vcsUrl = 'https://github.com/jmeter-gradle-plugin/jmeter-gradle-plugin.git'

        version {
            name = "$version" //Bintray logical version name
            gpg { sign = true }
            
			//Optional configuration for Maven Central sync of the version
            mavenCentralSync {
                sync = false //true by default
                user = 'userToken' //OSS user token
                password = 'paasword' //OSS user password
                close = '0' //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
            }            
        }
    }
}

